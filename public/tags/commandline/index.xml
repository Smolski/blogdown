<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>commandline on Assist.Prof.Dr. Alper YILMAZ</title>
    <link>/tags/commandline/</link>
    <description>Recent content in commandline on Assist.Prof.Dr. Alper YILMAZ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Tue, 27 Sep 2016 00:26:05 +0300</lastBuildDate>
    
	<atom:link href="/tags/commandline/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Eternal bash history</title>
      <link>/blog/2016/09/27/eternal-bash-history/</link>
      <pubDate>Tue, 27 Sep 2016 00:26:05 +0300</pubDate>
      
      <guid>/blog/2016/09/27/eternal-bash-history/</guid>
      <description>After starting to use the bash, you quickly realize bash history is an invaluable asset. You can quickly search and find a previous command in order to remember when and what you have done. I was using a primitive way to archive the history with which I accumulated history of commands since 2008. The primitive setup has two parts. First part is a cron job:
0 13 3,11,24 * * /bin/cat ~/.</description>
    </item>
    
    <item>
      <title>List of terminals with working folder names</title>
      <link>/blog/2016/09/15/list-of-terminals-with-working-folder-names/</link>
      <pubDate>Thu, 15 Sep 2016 12:00:00 +0300</pubDate>
      
      <guid>/blog/2016/09/15/list-of-terminals-with-working-folder-names/</guid>
      <description>From time to time, I had many terminal tabs open and wanted to see the list of terminals along with working folder names. Finally, I fed up with the issue tried to find a solution. After fiddling with some code, here&amp;rsquo;s the function that I added to .bashrc file
tty-list() { ps aux --sort=start_time | grep &amp;quot;pts/&amp;quot; | grep [b]ash | awk -F&amp;quot; +&amp;quot; &#39;{print $2&amp;quot;\t&amp;quot;$7}&#39; | while read PID PTS; do echo -n -e &amp;quot;$PTS&amp;quot;&amp;quot;\t&amp;quot;; readlink -f /proc/$PID/cwd; done ; }  In terminal, tty-list command lists the pts number and working folder name as shown below:</description>
    </item>
    
    <item>
      <title>Transpose a matrix with perl nested map</title>
      <link>/blog/2011/07/07/transpose-a-matrix-with-perl-nested-map/</link>
      <pubDate>Thu, 07 Jul 2011 09:33:37 +0000</pubDate>
      
      <guid>/blog/2011/07/07/transpose-a-matrix-with-perl-nested-map/</guid>
      <description>Here&amp;rsquo;s the matrix that we&amp;rsquo;ll be using:
$ paste &amp;lt;(seq 1 5) &amp;lt;(seq 12 16) 1 12 2 13 3 14 4 15 5 16  Now, let&amp;rsquo;s use a perl one-liner with nested maps to transpose the matrix:
$ paste &amp;lt;(seq 1 5) &amp;lt;(seq 12 16) | perl -ane &#39;push @matrix,[@F]; END { print join &amp;quot;\n&amp;quot;,map {$row=$_; join&amp;quot;\t&amp;quot;,map { $matrix[$_][$row]} 0 .. $#matrix } 0 .. $#{$matrix[0]}; print &amp;quot;\n&amp;quot; }&#39; 1 2 3 4 5 12 13 14 15 16  I got the idea from this blog post, but I slightly modified it so that you don&amp;rsquo;t need to make a copy of the transposed array (to save memory)</description>
    </item>
    
    <item>
      <title>Extract intervals from an array of numbers</title>
      <link>/blog/2011/06/27/extract-intervals-from-an-array-of-numbers/</link>
      <pubDate>Mon, 27 Jun 2011 06:58:02 +0000</pubDate>
      
      <guid>/blog/2011/06/27/extract-intervals-from-an-array-of-numbers/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s assume you have an array of numbers and you want to extract intervals from this array. For example, from such an array: 2,3,4,5,8,9,10,11,12,15,18,19,20 you should be getting (2-5), (8-12), (18-20) as intervals.&lt;/p&gt;

&lt;p&gt;More bioinformatic case: Let&amp;rsquo;s assume you ran samtools pileup format and want to extract intervals from the genomic coordinates that has at least one hit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Plot one-liner generated data with gnuplot</title>
      <link>/blog/2010/10/16/plot-one-liner-generated-data-with-gnuplot/</link>
      <pubDate>Sat, 16 Oct 2010 22:13:24 +0000</pubDate>
      
      <guid>/blog/2010/10/16/plot-one-liner-generated-data-with-gnuplot/</guid>
      <description>In this post, I&amp;rsquo;ll demonstrate how to use gnuplot in a one-liner. We&amp;rsquo;ll use the pipe but unfortunately you cannot pipe raw data to gnuplot directly (as far as I know). The piped data should contain basic gnuplot commands on top. So, we&amp;rsquo;ll use the following template:
very-complicated-data-generating-commands | sed -e &amp;quot;1i\plot &#39;-&#39; &amp;quot; | gnuplot -persist  If you&amp;rsquo;re interested in quickly see how this works, try something simple:</description>
    </item>
    
    <item>
      <title>bash completion for scp</title>
      <link>/blog/2010/03/10/bash-completion-for-scp/</link>
      <pubDate>Wed, 10 Mar 2010 16:30:03 +0000</pubDate>
      
      <guid>/blog/2010/03/10/bash-completion-for-scp/</guid>
      <description>I have been looking for a solution for broken bash_completion for scp command. I was thinking my ssh was not configured correctly for password-less login. But I just found out that bash completion is broken for Ubuntu 9.10.
If you are suffering from same symptom, please read this article for fix.</description>
    </item>
    
    <item>
      <title>Retrieve WP categories from commandline</title>
      <link>/blog/2010/01/13/retrieve-wp-categories-from-commandline/</link>
      <pubDate>Wed, 13 Jan 2010 19:08:15 +0000</pubDate>
      
      <guid>/blog/2010/01/13/retrieve-wp-categories-from-commandline/</guid>
      <description>Posting to WP from commandline is great. Before I post it, I need to lookup available categories so that I can categorize the new post correctly. To prevent a visit to WP admin GUI, I used the same Perl module for posting to retrieve available categories. Below is the code. I hope it helps you too..
use WordPress::XMLRPC; my $o = WordPress::XMLRPC-&amp;gt;new({ username =&amp;gt; &#39;username&#39;, password =&amp;gt; &#39;password&#39;, proxy =&amp;gt; &#39;http://yourblog-address/xmlrpc.</description>
    </item>
    
  </channel>
</rss>
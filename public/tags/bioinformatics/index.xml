<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bioinformatics on Assist.Prof.Dr. Alper YILMAZ</title>
    <link>/tags/bioinformatics/</link>
    <description>Recent content in bioinformatics on Assist.Prof.Dr. Alper YILMAZ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sun, 06 Mar 2011 08:40:36 +0000</lastBuildDate>
    
	<atom:link href="/tags/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Extract upstream region sequence with bedtools</title>
      <link>/blog/2011/03/06/extract-upstream-region-sequence-with-bedtools/</link>
      <pubDate>Sun, 06 Mar 2011 08:40:36 +0000</pubDate>
      
      <guid>/blog/2011/03/06/extract-upstream-region-sequence-with-bedtools/</guid>
      <description>Soon after SAM/BAM format became standard for short-read alignment softwares, high caliber tools have been emerging that can process the widely accepted format. bedtools is one of them and it&amp;rsquo;s easy to use and flexible. Most importantly you can integrate it with commandline pipes.
In this post, I&amp;rsquo;ll be describing how to extract upstream region sequences with the help of bedtools. I&amp;rsquo;ll be using the following files in my sample:</description>
    </item>
    
    <item>
      <title>perl one-liner to pick random sequences from fasta file</title>
      <link>/blog/2010/07/15/perl-one-liner-to-pick-random-sequences-from-fasta-file/</link>
      <pubDate>Thu, 15 Jul 2010 08:03:53 +0000</pubDate>
      
      <guid>/blog/2010/07/15/perl-one-liner-to-pick-random-sequences-from-fasta-file/</guid>
      <description>In an earlier post we learned how to use Bio::SeqIO module to process fasta files with one-liner. Let&amp;rsquo;s do more with this capability. What about selecting random sequences from a fasta file?
To achieve that, we&amp;rsquo;ll load the fasta file contents into a hash and then utilize the fact that rand(@array) returns index of a random element from that array.
Let&amp;rsquo;s pick 100 random sequences from a fasta file with one-liner:</description>
    </item>
    
    <item>
      <title>Visualize Circos images with Seadragon</title>
      <link>/blog/2010/04/02/visualize-circos-images-with-seadragon/</link>
      <pubDate>Fri, 02 Apr 2010 16:34:41 +0000</pubDate>
      
      <guid>/blog/2010/04/02/visualize-circos-images-with-seadragon/</guid>
      <description>Circos is a very powerful tool to visualize different types of data (expression, homology, etc) in circular fashion.
The software is capable of producing very large images if desired, suitable for posters.
Actually, we can create large images for viewing online, since it&amp;rsquo;s trivial to view them with Seadragon.
Below is an example from Circos tutorial (I modified the config file to obtain large image) (*EDIT: Since the seadragon page was very slow to respond, I just included the embed URL*S)</description>
    </item>
    
    <item>
      <title>perl one-liner to process sequence files in stream</title>
      <link>/blog/2010/04/01/perl-one-liner-to-process-sequence-files-in-stream/</link>
      <pubDate>Thu, 01 Apr 2010 02:43:57 +0000</pubDate>
      
      <guid>/blog/2010/04/01/perl-one-liner-to-process-sequence-files-in-stream/</guid>
      <description>Need a practical way to process fasta files with Bio::SeqIO module ? Below code will print sequence id and sequence length with tab per line.
perl -MBio::SeqIO -e &#39;$seq=Bio::SeqIO-&amp;gt;new(-fh =&amp;gt; \*STDIN);while ($myseq=$seq-&amp;gt;next_seq){print $myseq-&amp;gt;id,&amp;quot;\t&amp;quot;,$myseq-&amp;gt;length,&amp;quot;\n&amp;quot;;}&#39; &amp;lt; filename  OR
cat filename | perl -MBio::SeqIO -e &#39;$seq=Bio::SeqIO-&amp;gt;new(-fh =&amp;gt; \*STDIN);while ($myseq=$seq-&amp;gt;next_seq){print $myseq-&amp;gt;id,&amp;quot;\t&amp;quot;,$myseq-&amp;gt;length,&amp;quot;\n&amp;quot;;}&#39;  There are many more methods to use from Bio::Seq, such as revcom, translate, subseq(start,end), primary_id, desc, etc.
Piped file does not need to be in Fasta format, there are many other formats (listed here) which SeqIO can parse successfully.</description>
    </item>
    
  </channel>
</rss>